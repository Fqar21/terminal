// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

namespace TerminalApp
{
    runtimeclass CommandlineArgs
    {
        CommandlineArgs();
        CommandlineArgs(String[] args, String cwd, UInt32 showWindowCommand, String env);

        String[] Commandline { get; set; };
        String CurrentDirectory { get; };
        UInt32 ShowWindowCommand { get; };
        String CurrentEnvironment { get; };
    };

    runtimeclass RenameRequestArgs
    {
        RenameRequestArgs(String newName);
        String NewName { get; };
        Boolean Succeeded;
    };

    runtimeclass WindowActivatedArgs
    {
        WindowActivatedArgs(UInt64 peasantID, Guid desktopID, Windows.Foundation.DateTime activatedTime);
        WindowActivatedArgs(UInt64 peasantID, UInt64 hwnd, Guid desktopID, Windows.Foundation.DateTime activatedTime);
        UInt64 PeasantID { get; };
        UInt64 Hwnd { get; };
        Guid DesktopID { get; };
        Windows.Foundation.DateTime ActivatedTime { get; };
    };

    enum MonitorBehavior
    {
        InPlace,
        ToCurrent,
        ToMouse,
    };

    [default_interface] runtimeclass SummonWindowBehavior {
        SummonWindowBehavior();
        Boolean MoveToCurrentDesktop;
        Boolean ToggleVisibility;
        UInt32 DropdownDuration;
        MonitorBehavior ToMonitor;
    }

    [default_interface] runtimeclass AttachRequest {
        String Content { get; };
        UInt32 TabIndex { get; };
    };
    [default_interface] runtimeclass RequestReceiveContentArgs {
        RequestReceiveContentArgs(UInt64 src, UInt64 tgt, UInt32 tabIndex);

        UInt64 SourceWindow { get; };
        UInt64 TargetWindow { get; };
        UInt32 TabIndex { get; };
    };

    [default_interface] runtimeclass FindTargetWindowArgs {
        CommandlineArgs Args { get; };
        Int32 ResultTargetWindow;
        String ResultTargetWindowName;
    }

    [default_interface] runtimeclass ProposeCommandlineResult {
        Windows.Foundation.IReference<UInt64> Id { get; };
        String WindowName { get; };
        Boolean ShouldCreateWindow { get; }; // If you name this `CreateWindow`, the compiler will explode
    }

    [default_interface] runtimeclass WindowRequestedArgs {
        WindowRequestedArgs(ProposeCommandlineResult windowInfo, CommandlineArgs command);

        UInt64 Id { get; };
        String WindowName { get; };

        String[] Commandline { get; };
        String CurrentDirectory { get; };
        UInt32 ShowWindowCommand { get; };
        String CurrentEnvironment { get; };

        String Content { get; };
        Windows.Foundation.IReference<Windows.Foundation.Rect> InitialBounds { get; };
    }

    [default_interface] runtimeclass SummonWindowSelectionArgs {
        SummonWindowSelectionArgs();
        SummonWindowSelectionArgs(String windowName);
        String WindowName;
        Boolean OnCurrentDesktop;
        // TODO GH#8888 Other options:
        // * CurrentMonitor

        Boolean FoundMatch;
        SummonWindowBehavior SummonBehavior;
        Windows.Foundation.IReference<UInt64> WindowID;
    }

    struct PeasantInfo
    {
        UInt64 Id;
        String Name;
        String TabTitle;
    };
}
